Delete data from Cloud Firestore

The following examples demonstrate how to delete documents, fields, and collections.
Delete documents

To delete a document, use the following language-specific delete() methods:

Use the delete() method:

const res = await db.collection('cities').doc('DC').delete();

Warning: Deleting a document does not delete its subcollections!

When you delete a document, Cloud Firestore does not automatically delete the documents within its subcollections. You can still access the subcollection documents by reference. For example, you can access the document at path /mycoll/mydoc/mysubcoll/mysubdoc even if you delete the ancestor document at /mycoll/mydoc.

Non-existent ancestor documents appear in the console, but they do not appear in query results and snapshots.

If you want to delete a document and all the documents within its subcollections, you must do so manually. For more information, see Delete Collections.
Delete fields

To delete specific fields from a document, use the following language-specific FieldValue.delete() methods when you update a document:
Use the FieldValue.delete() method:

// Create a document reference
const cityRef = db.collection('cities').doc('BJ');

// Remove the 'capital' field from the document
const res = await cityRef.update({
capital: FieldValue.delete()
});

Delete collections

To delete an entire collection or subcollection in Cloud Firestore, retrieve (read) all the documents within the collection or subcollection and delete them. This process incurs both read and delete costs. If you have larger collections, you may want to delete the documents in smaller batches to avoid out-of-memory errors. Repeat the process until you've deleted the entire collection or subcollection.

Deleting a collection requires coordinating an unbounded number of individual delete requests. If you need to delete entire collections, do so only from a trusted server environment. While it is possible to delete a collection from a mobile/web client, doing so has negative security and performance implications.

The snippets below are somewhat simplified and do not deal with error handling, security, deleting subcollections, or maximizing performance. To learn more about one recommended approach to deleting collections in production, see Deleting Collections and Subcollections.

async function deleteCollection(db, collectionPath, batchSize) {
const collectionRef = db.collection(collectionPath);
const query = collectionRef.orderBy('**name**').limit(batchSize);

return new Promise((resolve, reject) => {
deleteQueryBatch(db, query, resolve).catch(reject);
});
}

async function deleteQueryBatch(db, query, resolve) {
const snapshot = await query.get();

const batchSize = snapshot.size;
if (batchSize === 0) {
// When there are no documents left, we are done
resolve();
return;
}

// Delete documents in a batch
const batch = db.batch();
snapshot.docs.forEach((doc) => {
batch.delete(doc.ref);
});
await batch.commit();

// Recurse on the next process tick, to avoid
// exploding the stack.
process.nextTick(() => {
deleteQueryBatch(db, query, resolve);
});
}

Delete data with the Firebase CLI

You can also use the Firebase CLI to delete documents and collections. Use the following command to delete data:
Note: Deleting data with the Firebase CLI incurs read and delete costs. For more information, see Pricing.

firebase firestore:delete [options] <<path>>

Delete data with the console

You can delete documents and collections from the Cloud Firestore page in the console. Deleting a document from the console deletes all of the nested data in that document, including any subcollections.
Note: Deleting data with the Firebase CLI incurs read and delete costs. For more information, see Pricing.
Delete data with TTL policies

A TTL policy designates a given field as the expiration time for documents in a given collection group. TTL delete operations count towards your document delete costs.

For information about setting TTL, see Manage data retention with TTL policies.

For more information on error codes and how to resolve latency issues when deleting data check out the troubleshooting page.
Delete data with Dataflow
Dataflow is a great tool for bulk operations on your Firestore database. The Firestore connector for Dataflow introduction blog post has an example of deleting all documents in a collection group.
