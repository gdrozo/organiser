Node.js quickstart

Quickstarts explain how to set up and run an app that calls a Google Workspace API.

Google Workspace quickstarts use the API client libraries to handle some details of the authentication and authorization flow. We recommend that you use the client libraries for your own apps. This quickstart uses a simplified authentication approach that is appropriate for a testing environment. For a production environment, we recommend learning about authentication and authorization before choosing the access credentials that are appropriate for your app.

Create a Node.js command-line application that makes requests to the Google Drive API.
Objectives

    Set up your environment.
    Install the client library.
    Set up the sample.
    Run the sample.

Prerequisites

To run this quickstart, you need the following prerequisites:

    Node.js & npm installed.
    A Google Cloud project.

    A Google account with Google Drive enabled.

Set up your environment

To complete this quickstart, set up your environment.
Enable the API
Before using Google APIs, you need to turn them on in a Google Cloud project. You can turn on one or more APIs in a single Google Cloud project.

    In the Google Cloud console, enable the Google Drive API.

    Enable the API

Configure the OAuth consent screen

If you're using a new Google Cloud project to complete this quickstart, configure the OAuth consent screen. If you've already completed this step for your Cloud project, skip to the next section.

    In the Google Cloud console, go to Menu menu > Google Auth platform > Branding.

    Go to Branding
    If you have already configured the Google Auth platform, you can configure the following OAuth Consent Screen settings in Branding, Audience, and Data Access. If you see a message that says Google Auth platform not configured yet, click Get Started:
        Under App Information, in App name, enter a name for the app.
        In User support email, choose a support email address where users can contact you if they have questions about their consent.
        Click Next.
        Under Audience, select Internal.
        Click Next.
        Under Contact Information, enter an Email address where you can be notified about any changes to your project.
        Click Next.
        Under Finish, review the Google API Services User Data Policy and if you agree, select I agree to the Google API Services: User Data Policy.
        Click Continue.
        Click Create.
    For now, you can skip adding scopes. In the future, when you create an app for use outside of your Google Workspace organization, you must change the User type to External. Then add the authorization scopes that your app requires. To learn more, see the full Configure OAuth consent guide.

Authorize credentials for a desktop application
To authenticate end users and access user data in your app, you need to create one or more OAuth 2.0 Client IDs. A client ID is used to identify a single app to Google's OAuth servers. If your app runs on multiple platforms, you must create a separate client ID for each platform.
Caution: This quickstart must be run locally and with access to a browser. It doesn't work if run on a remote terminal such as Cloud Shell or over SSH.

    In the Google Cloud console, go to Menu menu > Google Auth platform > Clients.

    Go to Clients
    Click Create Client.
    Click Application type > Desktop app.
    In the Name field, type a name for the credential. This name is only shown in the Google Cloud console.
    Click Create.

    The newly created credential appears under "OAuth 2.0 Client IDs."
    Save the downloaded JSON file as credentials.json, and move the file to your working directory.

Install the client library

Install the libraries using npm:

    npm install googleapis@105 @google-cloud/local-auth@2.1.0 --save

Set up the sample

In your working directory, create a file named index.js.

In the file, paste the following code:

drive/quickstart/index.js
View on GitHub

    const fs = require('fs').promises;
    const path = require('path');
    const process = require('process');
    const {authenticate} = require('@google-cloud/local-auth');
    const {google} = require('googleapis');

    // If modifying these scopes, delete token.json.
    const SCOPES = ['https://www.googleapis.com/auth/drive.metadata.readonly'];
    // The file token.json stores the user's access and refresh tokens, and is
    // created automatically when the authorization flow completes for the first
    // time.
    const TOKEN_PATH = path.join(process.cwd(), 'token.json');
    const CREDENTIALS_PATH = path.join(process.cwd(), 'credentials.json');

    /**
     * Reads previously authorized credentials from the save file.
     *
     * @return {Promise<OAuth2Client|null>}
     */
    async function loadSavedCredentialsIfExist() {
      try {
        const content = await fs.readFile(TOKEN_PATH);
        const credentials = JSON.parse(content);
        return google.auth.fromJSON(credentials);
      } catch (err) {
        return null;
      }
    }

    /**
     * Serializes credentials to a file compatible with GoogleAuth.fromJSON.
     *
     * @param {OAuth2Client} client
     * @return {Promise<void>}
     */
    async function saveCredentials(client) {
      const content = await fs.readFile(CREDENTIALS_PATH);
      const keys = JSON.parse(content);
      const key = keys.installed || keys.web;
      const payload = JSON.stringify({
        type: 'authorized_user',
        client_id: key.client_id,
        client_secret: key.client_secret,
        refresh_token: client.credentials.refresh_token,
      });
      await fs.writeFile(TOKEN_PATH, payload);
    }

    /**
     * Load or request or authorization to call APIs.
     *
     */
    async function authorize() {
      let client = await loadSavedCredentialsIfExist();
      if (client) {
        return client;
      }
      client = await authenticate({
        scopes: SCOPES,
        keyfilePath: CREDENTIALS_PATH,
      });
      if (client.credentials) {
        await saveCredentials(client);
      }
      return client;
    }

    /**
     * Lists the names and IDs of up to 10 files.
     * @param {OAuth2Client} authClient An authorized OAuth2 client.
     */
    async function listFiles(authClient) {
      const drive = google.drive({version: 'v3', auth: authClient});
      const res = await drive.files.list({
        pageSize: 10,
        fields: 'nextPageToken, files(id, name)',
      });
      const files = res.data.files;
      if (files.length === 0) {
        console.log('No files found.');
        return;
      }

      console.log('Files:');
      files.map((file) => {
        console.log(`${file.name} (${file.id})`);
      });
    }

    authorize().then(listFiles).catch(console.error);

Run the sample

In your working directory, run the sample:

    node .

    The first time you run the sample, it prompts you to authorize access:
        If you're not already signed in to your Google Account, sign in when prompted. If you're signed in to multiple accounts, select one account to use for authorization.
        Click Accept.

    Your Nodejs application runs and calls the Google Drive API.

    Authorization information is stored in the file system, so the next time you run the sample code, you aren't prompted for authorization.
